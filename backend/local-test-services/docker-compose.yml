version: '3.7'

services:
  auth-api:
    build:
      context: ..
      dockerfile: auth/auth-api/docker/Dockerfile.jvm
    ports:
      - '${AUTH_SERVICE_PORT:-8080}:8080'
    environment:
      - LOG_LEVEL=INFO
      - POSTGRES_HOST=db
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JAEGER_AGENT_HOST=jaeger:6831
    depends_on:
      - auth-api-migrations
  auth-api-migrations:
    build:
      context: ../auth/auth-api/migrations
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  beacon-api:
    build:
      context: ..
      dockerfile: beacon/api/docker/Dockerfile.jvm
    ports:
      - '${BEACON_SERVICE_PORT:-8081}:8080'
    depends_on:
      - beacon-api-migrations
      - kafka
    environment:
      - LOG_LEVEL=INFO
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
  beacon-api-migrations:
    build:
      context: ../beacon/api/migrations
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  session-api:
    build:
      context: ..
      dockerfile: session/api/docker/Dockerfile.jvm
    ports:
      - '${SESSION_SERVICE_PORT:-8082}:8080'
    depends_on:
      - session-api-migrations
      - kafka
    environment:
      - LOG_LEVEL=INFO
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://kafka:9092
      - POSTGRES_HOST=db
      - JAEGER_AGENT_HOST=jaeger:6831
  session-api-migrations:
    build:
      context: ../session/api/migrations
      dockerfile: Dockerfile
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  db:
    image: postgres:11
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  kafka:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    command:
      [
        'sh',
        '-c',
        'bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}',
      ]
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      LOG_DIR: '/tmp/logs'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  zookeeper:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    command:
      ['sh', '-c', 'bin/zookeeper-server-start.sh config/zookeeper.properties']
    ports:
      - '2181:2181'
    environment:
      LOG_DIR: /tmp/logs

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      discovery.type: single-node
    networks:
      - elk
  logstash:
    image: docker.elastic.co/logstash/logstash:7.6.2
    volumes:
      - source: $HOME/pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    ports:
      - '12201:12201/udp'
      - '5000:5000'
      - '9600:9600'
    networks:
      - elk
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.6.2
    ports:
      - '5601:5601'
    networks:
      - elk
    depends_on:
      - elasticsearch

  jaeger:
    image: jaegertracing/all-in-one:1.17.1
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - 16686:16686
      - 14268:14268

networks:
  elk:
    driver: bridge
